name: Version Bump and Notify

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  check_commit:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      SHOULD_RUN: ${{ steps.check_commit.outputs.SHOULD_RUN }}
    steps:
      - name: Checkout Files
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ORG_GITHUB_TOKEN }}
          fetch-depth: 0 # Need full git history for logs

      - name: check if skip ci
        id: check_commit
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          if [[ "$COMMIT_MESSAGE" == *"[skip ci]"* ]]; then
            echo "SHOULD_RUN=false" >> "$GITHUB_OUTPUT"
          else
            echo "SHOULD_RUN=true" >> "$GITHUB_OUTPUT"
          fi

  version-bump:
    needs: check_commit
    if: ${{ needs.check_commit.outputs.SHOULD_RUN != 'false' }}
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ORG_GITHUB_TOKEN }}
          fetch-depth: 0 # Need full git history for version bumping

      - name: Determine version bump type
        id: version
        run: |
          commit_message=$(git log -1 --pretty=%B)
          if [[ "$commit_message" == *"[major]"* ]]; then
            echo "type=major" >> "$GITHUB_ENV"
          elif [[ "$commit_message" == *"[minor]"* ]]; then
            echo "type=minor" >> "$GITHUB_ENV"
          elif [[ "$commit_message" == *"[prerelease]"* ]]; then
            echo "type=prerelease --preid=rc" >> "$GITHUB_ENV"
          else
            echo "type=patch" >> "$GITHUB_ENV"
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          registry-url: 'https://registry.npmjs.org/'

      - name: Install dependencies
        run: npm install

      - name: Bump version and commit
        run: |
          # Clean Branch 
          git reset --hard HEAD

          # Pull latest changes using the improved strategy
          git pull origin main --no-rebase --strategy=ort --no-edit

          # Configure git user
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Bump version based on commit message and capture the new version
          new_version=$(npm version ${{ env.type }} -m "chore(release): %s [skip ci]")
          echo "NEW_VERSION=${new_version}" >> "$GITHUB_ENV"

          # Push the version bump commit and tag
          git push origin main --follow-tags

      - name: Build and publish
        run: |
          npm run build
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Notify Slack on Success
        if: success()
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: '✅ Version bump & publish successful on main: ${{ env.NEW_VERSION }}'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Notify Slack on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: '❌ Version bump or publish failed on main: ${{ github.ref_name }}'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
